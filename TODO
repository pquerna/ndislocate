just do it:

- http server
  - service registration (semi done, validation side is done)
  - Need to spec out API design soonish
    - JSON-Schema auto-generated docs helpful?

- services heartbeating/checkup (see if tcp port is alive, modules for this)
  - static / ttl
  - tcp alive
  - custom every X seconds
    - thrift alive
    - http & body match
    - databases (mysql, pgsql)
    - nosql (cassandra, redis, mongo)
    - http & https
    - ajp (?)
    - amqp

- on disk services json file (atomic replacement)
- on disk state storage for internal use

- client clients:
  - node.js
  - python
    - Djnago 1.2 example for database routing:
      <http://github.com/jbalogh/django-multidb-router>
    - Cassandra Clusters
  - php
  - Java (?) (ck/esper needs this)

- dislocate console
 - Base on REPLServer
 - status, peers, local services, all services, globs, subscribe, disable, etc

other:

- documentation!

- test cases / testing framework
  - maybe just assert's for now?

design:

- design peer to peer network protocol
	- http (?)
	- sha512 HMAC on data
	- think about SSL crap / hate CAs / etc

- think about gossip protocol more
	- do we need it initially?
	- network partitions
	- partial tree updates
		- how do you update efficiently without transmitting the entire tree. (tree diffs between timestamps?) (there have to be some academic papers about this part)

